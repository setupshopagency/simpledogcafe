<script>
    document.addEventListener('alpine:init', () => {

    Alpine.data('handleMinicart', () => ({
        init() {
            console.log('handleMinicart init')
        },
        open: false,
        note: null,
        attributes: {},
        original_total_price: 0,
        total_price: 0,
        total_discount: 0,
        total_weight: 0.0,
        item_count: 0,
        products: [],
        requires_shipping: false,
        currency: 'EUR',
        items_subtotal_price: 0,
        cart_level_discount_applications: [],
        cartApiResponseDefault : {
            result : {},
            show : false,
            timeout : 5000,
        },
        cartApiResponse : {
            result : {},
            show : false,
            timeout : 5000,
        },

        // deprecated:
        total: {
            items: 0,
            price: 0,
            weight: 0,
            discount: 0,
        },
        _abortController : null,
        initAbortController() {
            if(this._abortController) {
                this._abortController.abort('abort previous request');
            }
            this._abortController = new AbortController()
        },
        getAbortControllerSignal() {
            return this._abortController.signal
        },
        resetAbortController() {
            this._abortController = null;
        },
        toggleMiniCart() {
            console.log('(minicart.js) toggleMiniCart called');

            LiquifyHelper.handleTriggerClick();

            this.getCart();
        },

        /**
         * Get the cart data.
         */
        getCart() {
            this.initAbortController()
            fetch(window.Shopify.routes.root + 'cart.js', {
                method: 'GET',
                signal: this.getAbortControllerSignal(),
                headers: {'Content-Type': 'application/json'},
            })
            .then(response => response.json())
            .then(data => {
                this.resetAbortController();

                this.total.items = data.item_count;

                this.products = data.items.map((item) => {
                    item.title = this.htmlspecialchars_decode(item.title)
                    return item
                })

                this.total.price = data.total_price;
                this.total.weight = data.total_weight;
                this.total.discount = data.total_discount;

                this.$dispatch('carttotalitems', data.item_count);
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        },

        /**
         * @param id
         * @param quantity
         */
        increaseCartItemQuantity(id, quantity) {
            this.updateCartItemQuantity(id, parseInt(quantity) + 1);
        },

        /**
         * @param id
         * @param quantity
         */
        decreaseCartItemQuantity(id, quantity) {
            this.updateCartItemQuantity(id, parseInt(quantity) - 1);
        },

        /**
         * Update the cart item.
         *
         * @param id
         * @param quantity
         */
        updateCartItemQuantity(id, quantity) {
            this.initAbortController();
            console.log('updateCartItemQuantity(): id, quantity: ', id, quantity);
            this.products.filter((product)  => {
                if(parseInt(product.id) === parseInt(id)) {
                    product.quantity = quantity
                }
            })
            fetch(window.Shopify.routes.root + 'cart/change.js', {
                method: 'POST',
                signal: this.getAbortControllerSignal(),
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    id: `${id}`,
                    quantity: quantity,
                }),
            })
                .then(response => response.json())
                .then(data => {
                    this.resetAbortController();
                    console.log('updateCartItemQuantity(): ', data);

                    this.$dispatch('cartupdated');
                    this.$dispatch('showcartmessage', { status: data.status, message: data.message, description: data.description });
                })
                .catch((error) => {
                    console.error('Error:', error);
                    this.$dispatch('showcartmessage', { status: error?.status, message: error, description: error });
                });
        },

        /**
         * Format monetary values.
         */
        moneyFormat(value, minor = true) {
            return LiquifyHelper.moneyFormat(value, minor)
        },

        htmlspecialchars_decode(string) {
            return LiquifyHelper.htmlspecialchars_decode(string)
        },

        /**
         * Shows the minicart api message
         * @param event
         */
        showCartMessage(event) {
            console.log("dispatched showCartMessage", event)
            if(event?.detail?.status) {
                this.cartApiResponse.result = event.detail ?? this.cartApiResponseDefault.result;
                this.cartApiResponse.show = true
                setTimeout(() =>  this.cartApiResponse =  this.cartApiResponseDefault, this.cartApiResponse.timeout ?? 5000)
            }
        },
    }))
});


</script>
<div data-hover="false" data-delay="0" li-element="mini-cart" class="nav_dropdown w-dropdown" x-cloak="" x-data="handleMinicart()" x-init="getCart()" @cartupdated.window="getCart()" @setcartitem.window="updateCartItemQuantity($event.detail.product, $event.detail.quantity)" @increasecartitem.window="increaseCartItemQuantity($event.detail.product, $event.detail.quantity)" @decreasecartitem.window="decreaseCartItemQuantity($event.detail.product, $event.detail.quantity)" @toggleminicart.window="toggleMiniCart()" @showcartmessage.window="showCartMessage"><div li-element="mini-cart-toggle" class="nav_shop-icon w-dropdown-toggle" @click="$dispatch('cartupdated.window')"><svg id="Layer_1" data-name="Layer 1" viewbox="0 0 128 128" width="100%" fill="currentColor" class="icon-embed-xsmall"><defs><style></style></defs><title></title><path class="cls-1" d="M120.36433,42.96987H105.48276a5.96828,5.96828,0,0,0-.49969-.734L80.18837,11.56574a5.9526,5.9526,0,1,0-9.25815,7.4847L90.26745,42.96987H37.732L57.07,19.047a5.95265,5.95265,0,0,0-9.25878-7.48407L23.01653,42.23619a5.96416,5.96416,0,0,0-.49941.73368H7.63567a4.66552,4.66552,0,0,0,0,9.331h5.02915a334.93618,334.93618,0,0,1,6.30645,61.7265,4.6657,4.6657,0,0,0,4.66552,4.62047h80.72648a4.6657,4.6657,0,0,0,4.66552-4.62047,334.93618,334.93618,0,0,1,6.30645-61.7265h5.02908a4.66552,4.66552,0,0,0,0-9.331ZM45.81893,93.6793a4.34376,4.34376,0,1,1-8.68753,0V67.93848a4.34376,4.34376,0,0,1,8.68753,0Zm22.52322,0a4.34376,4.34376,0,1,1-8.68753,0V67.93848a4.34376,4.34376,0,0,1,8.68753,0Zm22.52322,0a4.34376,4.34376,0,1,1-8.68753,0V67.93848a4.34376,4.34376,0,0,1,8.68753,0Z"></path></svg><div li-element="mini-cart-item-count" class="nav_shop-quantity" x-data="{ items: 0 }" x-text="items" @carttotalitems.window="items = event.detail">1</div></div><nav li-element="mini-cart-container" class="nav_mini-cart-holder w-dropdown-list" :class="open || 'mini-cart-closed'"><div li-element="dropdown-toggle" class="nav_mini-cart-close" data-dropdowntoggle="" @click="LiquifyHelper.triggerClick($event.target.closest('.w-dropdown').querySelector('.w-dropdown-toggle.w--open'))"></div><div class="mini-cart_component"><div li-element="mini-cart-full" class="mini-cart_full" :style="total.items < 1 && { display: 'none' }"><div class="mini-cart_header"><div class="div-block-11"><div class="heading-style-h3">Cart</div><div li-element="dropdown-toggle" class="mini-cart_close w-embed" data-dropdowntoggle="" @click="LiquifyHelper.triggerClick($event.target.closest('.w-dropdown').querySelector('.w-dropdown-toggle.w--open'))"><svg width="15" height="15" viewbox="0 0 15 15" fill="none"><path d="M1.84775 14.178L0.447754 12.778L6.04775 7.17798L0.447754 1.57798L1.84775 0.177979L7.44775 5.77798L13.0478 0.177979L14.4478 1.57798L8.84775 7.17798L14.4478 12.778L13.0478 14.178L7.44775 8.57798L1.84775 14.178Z" fill="currentColor"></path></svg></div></div><div class="free-shipping"><div x-data="{ percentage: 0 }" class="progress-box"><div x-bind:style="{ width: percentage + '%', transition: 'width 0.5s ease-in-out' }" x-init="$watch('total.price', value => {     percentage = Math.min(100, Math.round((value / 10000) * 100)); })" class="progress"></div></div></div></div><div class="mini-cart_line-item no-scrollbar"><ul role="list" class="mini-cart_line-item_list w-list-unstyled"><template x-for="product in products" :key="product.key">
    <li li-element="mini-cart-item" class="mini-cart_line-item_item" x-init="getCart()"><img src="../images/placholder-3.svg" loading="eager" alt="" class="mini-cart_line-item_img" x-bind:src="product.image">
<div class="mini-cart_line-item_product-info"><div class="div-block-8"><div><div li-js-object="product.title" class="text-size-regular text-weight-bold" x-text="product.title">Product Title</div><div class="mini-cart_line-item_price"><div li-js-price="product.price" class="text-size-small" x-text="LiquifyHelper.moneyFormat(product.price, true, '{{ shop.money_with_currency_format }}')">14,99 $</div><template x-if="product.price < product.original_price">
            <div li-js-if="product.price < product.original_price">
        <div li-js-price="product.original_price" class="text-size-small text-style-strikethrough text-style-muted" x-text="LiquifyHelper.moneyFormat(product.original_price, true, '{{ shop.money_with_currency_format }}')">14,99 $</div>        </div>
    </template>
</div></div><div class="mini-cart_line-item_quantity"><a li-element="mini-cart-item-decrease" href="#" class="mini-cart_line-item_quantity-adjust" :productprop="product" @click="$dispatch('decreasecartitem', { product: product.id, quantity: product.quantity, action: 'decrease' })">-</a><input li-element="mini-cart-item-quantity" class="mini-cart_line-item_quantity-adjust bg-custom" value="1" :productprop="product" @blur="$dispatch('setcartitem', { product: product.id, quantity: product.quantity })" x-model="product.quantity">
<a li-element="mini-cart-item-increase" href="#" class="mini-cart_line-item_quantity-adjust" :productprop="product" @click="$dispatch('increasecartitem', { product: product.id, quantity: product.quantity, action: 'increase' })">+</a></div></div><a li-element="mini-cart-item-remove" href="#" class="text-size-tiny text-color-grey" :productprop="product" @click="$dispatch('setcartitem', { product: product.id, quantity: 0 })">Remove</a></div></li></template>
</ul></div><div class="mini-cart_footer"><div class="mini-cart_footer_total"><div class="text-size-regular text-weight-bold">Subtotal</div><div><div x-text="moneyFormat(total.price, true, '${{amount}}')" class="text-size-regular text-weight-bold">14,99 $</div><div x-text="LiquifyHelper.moneyFormat(total.price, true, '{{ shop.money_with_currency_format }}')" li-js-price="total.price" x-data="{ subtotal: 0 }" class="text-size-regular text-weight-bold">14,99 $</div><template x-if="total.price < original_total_price">
            <div li-js-if="total.price < original_total_price">
        <div li-js-price="original_total_price" class="text-size-regular text-weight-bold text-style-strikethrough text-style-muted" x-text="LiquifyHelper.moneyFormat(original_total_price, true, '{{ shop.money_with_currency_format }}')">14,99 $</div>        </div>
    </template>
</div></div><div li-element="mini-cart-api-response" class="mini-cart_footer-message"></div><a x-bind:href="'/checkout'" href="#" class="button cta_button w-button">Checkout</a><div class="payment-options"><img src="{{ 'Amex.png' | asset_url }}" loading="lazy" alt="" class="icon_payment-option in-cart">
<img src="{{ 'ApplePay.png' | asset_url }}" loading="lazy" alt="" class="icon_payment-option in-cart">
<img src="{{ 'DinersClub.png' | asset_url }}" loading="lazy" alt="" class="icon_payment-option in-cart">
<img src="{{ 'Discover.png' | asset_url }}" loading="lazy" alt="" class="icon_payment-option in-cart">
<img src="{{ 'GooglePay.png' | asset_url }}" loading="lazy" alt="" class="icon_payment-option in-cart">
<img src="{{ 'Mastercard.png' | asset_url }}" loading="lazy" alt="" class="icon_payment-option in-cart">
<img src="{{ 'Affirm.png' | asset_url }}" loading="lazy" alt="" class="icon_payment-option in-cart">
<img src="{{ 'ShopPay.png' | asset_url }}" loading="lazy" alt="" class="icon_payment-option in-cart">
<img src="{{ 'Visa.png' | asset_url }}" loading="lazy" alt="" class="icon_payment-option in-cart">
<img src="{{ 'PayPal.png' | asset_url }}" loading="lazy" alt="" class="icon_payment-option in-cart">
</div><a href="#" class="note-in-cart">Shipping & taxes calculated at checkout</a></div></div><div li-cloak="hide" li-element="mini-cart-empty" :style="total.items && { display: 'none' }"><div class="mini-cart_header"><div class="heading-style-h3">Cart</div><div li-mini-cart-toggle="" class="mini-cart_close w-embed" @click="$dispatch('cartupdated.window')"><svg width="15" height="15" viewbox="0 0 15 15" fill="none"><path d="M1.84775 14.178L0.447754 12.778L6.04775 7.17798L0.447754 1.57798L1.84775 0.177979L7.44775 5.77798L13.0478 0.177979L14.4478 1.57798L8.84775 7.17798L14.4478 12.778L13.0478 14.178L7.44775 8.57798L1.84775 14.178Z" fill="currentColor"></path></svg></div></div><div class="mini-cart_empty"><div class="text-size-regular">No Products selected</div></div></div></div></nav></div>
